template:
  - sensor:
      # Thermal power always positive and only non-zero when sign of detaT is corrent
    - name: "Therma V thermal power"
      state_class: measurement
      device_class: power
      unit_of_measurement: "W"
      state: >
        {% set cool_p  = is_state('climate.therma_v_heating_cooling','cool') %}
        {% set heat_p  = is_state('climate.therma_v_heating_cooling','heat') %}
        {% set auto_p  = is_state('climate.therma_v_heating_cooling','auto') %}
        {% set dhw_p   = is_state('binary_sensor.therma_v_dhw_heating_state','on') %}
        {% set dhw_p   = is_state('binary_sensor.therma_v_dhw_heating_state','on') %}
        
        {% set boost1_p   = is_state('binary_sensor.therma_v_dhw_booster_state','on') %}
        {% set boost2_p   = is_state('binary_sensor.therma_v_dhw_booster_2_state_s1','on') %}

        {% set flow_lg   = states('sensor.therma_v_water_flow_rate') | float(0) %}
        {% set Tout_lg   = states('sensor.therma_v_buffer_temperatures_in_from_heatpump_t1') | float("unknown") %}
        {% set Tin_lg    = states('sensor.therma_v_buffer_temperatures_return_to_heatpump_t4') | float("unknown") %}
        {% set rho_water = 1.0 | float %}
        {% set c_water   = 4184.0 | float %}

        {% set heating_p   = (heat_p or dhw_p) and (Tout_lg>Tin_lg) %}
        {% set cooling_p   = (cool_p and not dhw_p) and (Tout_lg<Tin_lg) %}

        {% if ( boost1_p or boost2_p ) %}
          {% set p_boost = 1500.0 | float(0) %}
        {% else %}  
          {% set p_boost = 0.0 | float(0) %}
        {% endif %}  

        {% if ( cooling_p or heating_p ) and (flow_lg > 8) %}
          {{ min( (((rho_water*flow_lg/60*c_water*(Tout_lg-Tin_lg)) | abs ) + p_boost) , 15000) | round(0) }}
        {% else %}
          {{ ( (Tout_lg-Tin_lg) + p_boost ) | round(0) }}
        {% endif %}
      # Added some noise with deltT on the booster only path 

    # Electric
    - name: "Therma V electric power"
      state_class: measurement
      device_class: power
      unit_of_measurement: "W"
      state: >
        {% set p_ufh     = states('sensor.shelly_plug_s2_power') | float(0) %}
        {% set p_dhw_cir = states('sensor.shelly_plug_s3_power') | float(0) %}
        {% set p_hp      = states('sensor.kwh_meter_3_phase_3c39e72df94a_active_power') | float(0) %}

        {{ (p_hp+p_ufh+p_dhw_cir) | round(0) }}

    - name: "Price of heat incl tax"
      state_class: measurement
      unit_of_measurement: "€/kWh"
      state: >
        {% set CoP      = states('sensor.therma_v_heatpump_cop') | float(0) %}
        {% set E_price  = states('sensor.entsoe_apex_in_current_electricity_market_price') | float(0) %}

        {% if (CoP > 1) %}
          {{ ( E_price/CoP ) | round(2)}}
        {% else %}  
          {{ 0.00 | round(2)}}
        {% endif %}  

      # CoP only active when E and T powers >500W
    - name: "Therma V Heatpump CoP"
      state_class: measurement
      state: >
        {% set pt_cop = states('sensor.therma_v_thermal_power') | float(0) %}
        {% set pe_cop = states('sensor.therma_v_electric_power') | float(0) %}
        {% set on_cop  = is_state('binary_sensor.therma_v_compressor_state','on') %}

        {% if (pe_cop > 500.0) and (pt_cop > 500.0) and on_cop %}
          {{ min( (pt_cop / pe_cop) , 10.0) | round(2) }}
        {% else %}
          {{ 0.00 | round(2) }}
        {% endif %}

      # SCoP purely on energies 
    - name: "Therma V Heatpump SCoP"
      state_class: measurement
      state: >
        {% set et_scop     = states('sensor.therma_v_scop_thermal_energy') | float(0) %}
        {% set ee_scop     = states('sensor.therma_v_scop_electric_energy') | float(0) %}

        {{ min( max(et_scop,1.0)/max(ee_scop,1.0) , 10.0) | round(2) }}

    - name: "Therma V delta T"
      state_class: measurement
      device_class: temperature
      unit_of_measurement: "°C"
      state: >
        {% set Tout_lg   = states('sensor.therma_v_buffer_temperatures_in_from_heatpump_t1') | float("unknown") %}
        {% set Tin_lg    = states('sensor.therma_v_buffer_temperatures_return_to_heatpump_t4') | float("unknown") %}

        {{ (Tout_lg-Tin_lg) | round(2) }}

    - name: "Heating delta T"
      state_class: measurement
      device_class: temperature
      unit_of_measurement: "°C"
      state: >
        {% set Tout_buf   = states('sensor.therma_v_buffer_temperatures_out_to_heating_t2') | float("unknown") %}
        {% set Tin_buf    = states('sensor.therma_v_buffer_temperatures_return_from_heating_t3') | float("unknown") %}

        {{ (Tout_buf-Tin_buf) | round(2) }}

sensor:
# Energy
  - platform: integration
    source: sensor.therma_v_electric_power
    name: "Therma V electric energy"
    method: left 
    unit_prefix: k
    unit_time: h
    round: 1

  - platform: integration
    source: sensor.therma_v_electric_power
    name: "Therma V SCOP electric energy"
    method: left 
    unit_prefix: k
    unit_time: h
    round: 1

  - platform: integration
    source: sensor.therma_v_thermal_power
    name: "Therma V SCOP thermal energy"
    method: left 
    unit_prefix: k
    unit_time: h
    round: 1

# Filters
  # - platform: filter
  #   name: "Therma V electric power"
  #   entity_id: sensor.therma_v_electric_power_unfiltered
  #   filters:
  #     - filter: lowpass
  #       time_constant: 10

  # - platform: filter
  #   name: "Therma V thermal power"
  #   entity_id: sensor.therma_v_thermal_power_unfiltered
  #   filters:
  #     - filter: lowpass
  #       time_constant: 10

  # - platform: filter
  #   name: "Therma V delta T"
  #   entity_id: sensor.therma_v_delta_t_unfiltered
  #   filters:
  #     - filter: outlier
  #       window_size: 4
  #       radius: 2.0

  # - platform: filter
  #   name: "Heating delta T"
  #   entity_id: sensor.heating_delta_t_unfiltered
  #   filters:
  #     - filter: outlier
  #       window_size: 4
  #       radius: 2.0