input_datetime:
  dhw_last_disinfection: # date and time of last disinfection
    name: "DHW last disinfection"
    has_date: true
    has_time: true
  dhw_next_disinfection: # start date and time of next disinfection
    name: "DHW next disinfection"
    has_date: true
    has_time: true
  dhw_disinfection_windown_start: # disinfection window start
    name: "DHW disinfection window start"
    has_date: false
    has_time: true
    initial: "00:05" # not adjustable in UI, comment when made adjustable
  dhw_disinfection_windown_end: # disinfection window end
    name: "DHW disinfection window end"
    has_date: false
    has_time: true
    initial: "10:00" # not adjustable in UI, comment when made adjustable

input_number:
  dhw_max_days_between_disinfections:
    name: "DHW max days between disinfections"
    initial: 12 # not adjustable in UI, comment when made adjustable
    min: 5
    max: 28
    step: 1
    mode: slider
  dhw_min_days_between_disinfections:
    name: "DHW min days between disinfections"
    initial: 5 # not adjustable in UI, comment when made adjustable
    min: 5
    max: 14
    step: 1
    mode: slider
  dhw_setpoint_state: # state to restore setpoint after disinfection
    name: "DHW setpoint state"
    min: 0
    max: 80
    step: 1
    mode: slider


input_select:
  dhw_disinfection_day:
    name: "DHW disinfection day"
    options:
      - Mon
      - Tue
      - Wed
      - Thu
      - Fri
      - Sat
      - Sun
    initial: Sun # not adjustable in UI, comment when made adjustable

automation:
  # Detect when last disinfection occured, note can be due to planned disinfection or unplanned
  # can be either by a planned disinfection or a negative energy price event 
  - id: dhw_disinfection_detection_auto
    alias: "DHW disinfection detection auto"
    description: "Detect when last disinfection has occured"
    mode: parallel
    # https://www.heatgeek.com/hot-water-temperature-scalding-and-legionella/
    # 55˚C 90% of legionella dies in approximately 20 minutes and 100% is killed over 5 to 6 hours. 
    # 60⁰C 90% it dies in 2 minutes and 100% in 30 minutes.
    # 65⁰C = 90% in around 10  seconds and 100% in 2 minutes
    # 70⁰C - it’s instant death for legionella 
    triggers:
      - trigger: numeric_state
        entity_id: climate.therma_v_dhw
        attribute: current_temperature
        above: 55
        for:
          hours: 6
      - trigger: numeric_state
        entity_id: climate.therma_v_dhw
        attribute: current_temperature
        above: 60
        for:
          minutes: 30
      - trigger: numeric_state
        entity_id: climate.therma_v_dhw
        attribute: current_temperature
        above: 65
        for:
          minutes: 2
    variables:
      next_in_days: "{{ states('input_number.dhw_max_days_between_disinfections') }}" 
    actions:
      # store the last disinfection
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.dhw_last_disinfection
        data:
          timestamp: "{{ now().timestamp() }}"
      # # plan one X days ahead
      # - action: input_datetime.set_datetime
      #   target:
      #     entity_id: input_datetime.dhw_next_disinfection
      #   data:
      #     timestamp: "{{ ( now()+timedelta(days=next_in_days) ).timestamp() }}"


  # Plan disinfection at cheapest hours on the disinfection day or when forces by max days passed
  - id: dhw_disinfection_planning_auto
    alias: "DHW disinfection planning auto"
    description: "Plan disinfection at cheapest hours on the disinfection day"
    mode: single
    triggers:
      - trigger: time
        at: "00:01" # every day just after midnight 
    variables:
      # days passed since last disinfection
      days_passed_since: "{{ ( ( as_timestamp(now()) - state_attr('input_datetime.dhw_last_disinfection','timestamp') ) / (60*60*24) ) | round(0)}}"
      # start time of the cheapes 3 hours between disinfection window start and end
      cheepest_hours: >
        {% from 'cheapest_energy_hours.jinja' import cheapest_energy_hours %}
        {{ as_timestamp(cheapest_energy_hours( sensor='sensor.nord_pool_nl_current_prices_excluding_tax', attr_all='prices',time_key='time', value_key='price', hours=3, look_ahead=false, include_today=true, include_tomorrow=false, start=states('input_datetime.dhw_disinfection_windown_start'), end=states('input_datetime.dhw_disinfection_windown_end'))) }}
    conditions:
      - or:
        - and:
          # check it it is the right day
          - condition: template
            value_template: "{{ now().weekday() == state_attr('input_select.dhw_disinfection_day', 'options').index(states('input_select.dhw_disinfection_day')) }}"
          # and the minumum days since are passed
          - condition: template
            value_template: "{{ days_passed_since >= (states('input_number.dhw_min_days_between_disinfections')|int) }}"
        # or the maximum days since are passed
        - condition: template
          value_template: "{{ days_passed_since >= (states('input_number.dhw_max_days_between_disinfections')|int) }}"  
    actions:
      # plan disinfection event
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.dhw_next_disinfection
        data:
          timestamp: "{{cheepest_hours}}" 

  # Run disinfection at planned moment 
  - id: dhw_disinfection_run_auto
    alias: "DHW disinfection run auto"
    description: "Run disinfection planned moment"
    mode: single
    triggers:
      - trigger: time
        at: input_datetime.dhw_next_disinfection
    actions:
      # Run disinfection
      - sequence:
        # store DHW setpoint
        - action: input_number.set_value
          target:
            entity_id: input_number.dhw_setpoint_state
          data:
            value: "{{ {{ state_attr('climate.therma_v_dhw','temperature') }} }}"
        # set dhw to 60C
        - action: climate.set_temperature
          target:
            entity_id: climate.therma_v_dhw
          data:
            temperature: 60
        # wait 15min
        - delay:
            minutes: 15
        # trigger disinfection over modbus
        - action: switch.turn_on
          target:
            entity_id: switch.therma_v_trigger_dhw_disinfection_cycle

  # Restore dhw set-point after disinfection
  - id: dhw_disinfection_restore_setpoint_auto
    alias: "DHW disinfection restore setpoint auto"
    description: "Restore setpoint after disinfection"
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.therma_v_dhw_disinfection_cycle_state
        from: "on"
        to: "off"
    actions:
      - action: climate.set_temperature
        target:
          entity_id: climate.therma_v_dhw
        data:
          temperature: "{{ states('input_number.dhw_setpoint_state') }}"

