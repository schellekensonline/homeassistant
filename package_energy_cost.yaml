template:
  - sensor:
# template sensors to determine the electricity cost per hour EURO/hr
    - name: "Power cost including tax"
      state_class: measurement
      unit_of_measurement: "€/h"
      availability: >
        {% set power   = states('sensor.p1_meter_3c39e72e6af0_active_power') | float("unknown") %}
        {% set cost    = states('sensor.entsoe_apex_in_current_electricity_market_price') | float("unknown") %}
        {{ Power|is_number and Cost|is_number}}
      state: >
          {% set power   = states('sensor.p1_meter_3c39e72e6af0_active_power') | float(0) %}
          {% set cost    = states('sensor.entsoe_apex_in_current_electricity_market_price') | float(0) %}
          {{ power/1000*cost }}

    - name: "Power cost excluding tax"
      state_class: measurement
      unit_of_measurement: "€/h"
      availability: >
        {% set power   = states('sensor.p1_meter_3c39e72e6af0_active_power') | float("unknown") %}
        {% set cost    = states('sensor.entsoe_apex_ex_current_electricity_market_price') | float("unknown") %}
        {{ Power|is_number and Cost|is_number}}
      state: >
          {% set power   = states('sensor.p1_meter_3c39e72e6af0_active_power') | float(0) %}
          {% set cost    = states('sensor.entsoe_apex_ex_current_electricity_market_price') | float(0) %}
          {{ power/1000*cost }}
# triggered sensors for the total energy cost per day based on the statistics sensors
  - trigger:
    - platform: time_pattern
      hours: 0
      minutes: 0
    sensor:
      - name: "Energy cost per day including tax"
        state_class: measurement
        unit_of_measurement: "€"
        state: "{{ states('sensor.energy_cost_over_one_day_including_tax')|float(0) }}"
  - trigger:
    - platform: time_pattern
      hours: 0
      minutes: 0
    sensor:
      - name: "Energy cost per day excluding tax"
        state_class: measurement
        unit_of_measurement: "€"
        state: "{{ states('sensor.energy_cost_over_one_day_excluding_tax')|float(0) }}"


sensor:
# integration of Euro/hr result is Euros
  - platform: integration
    source: sensor.power_cost_including_tax
    name: "Energy cost including tax"
    method: left
    unit_time: h
    round: 2
  - platform: integration
    source: sensor.power_cost_excluding_tax
    name: "Energy cost excluding tax"
    method: left
    unit_time: h
    round: 2
# moving difference over 24hrs used for template sensors that trigger at 0:00
# utility meters cycle and cannot be used reliably with the triggers in the template sensors
  - platform: statistics
    name: Energy cost over one day including tax
    entity_id: sensor.energy_cost_including_tax
    state_characteristic: change
    max_age:
      hours: 24
    precision: 2
    unique_id: energy_cost_over_one_day_including_tax

  - platform: statistics
    name: Energy cost over one day excluding tax
    entity_id: sensor.energy_cost_excluding_tax
    state_characteristic: change
    max_age:
      hours: 24
    precision: 2
    unique_id: energy_cost_over_one_day_excluding_tax

# The utility meters cycle daily automatically 
utility_meter:
  daily_energy_cost_including_tax:
    source: sensor.energy_cost_including_tax
    name: "Daily energy cost including tax"
    cycle: daily
#    delta_values: true #input is delta energy
    net_consumption: true #allows negative power
  daily_energy_cost_excluding_tax:
    source: sensor.energy_cost_excluding_tax
    name: "Daily energy cost excluding tax"
    cycle: daily
#    delta_values: true # input is delta energy
    net_consumption: true #allows negative power